#순열 permutation
#https://leetcode.com/problems/combinations
#백트래킹(backtracking)은 재귀적인 방법을 사용하여 해결책을 탐색하면서
#조건을 만족하지 않는 경우에는 되돌아가는 기법입니다.
#백트래킹
# (list.append(i)), 그 다음 숫자를 탐색하기 위해 재귀 호출을 수행합니다(dfs(i+1, k-1, list)).
# 하지만 만약 조건을 만족하는 조합을 완성하지 못한 채 재귀 호출을 마치게 되면,
# 현재 선택한 숫자를 다시 제거하여 이전 상태로 되돌아가는 백트래킹이 이루어집니다(list.pop()).
class Solution:
    def combine(self, n: int, k: int) -> list[list[int]]:
        result = []
        def dfs(start, k , list=[]):
            #start:시작인덱스 k:남은조합원소개수 list:현재까지생성된조합
            if k == 0:
                result.append(list[:])
                #print(list)
#                [1, 2]
#                [1, 3]
#                [1, 4]
#                [2, 3]
#                [2, 4]
#                [3, 4]
                return
            for i in range(start, n + 1): #(2,5)
                list.append(i)
                #print(i)
                #1
                #2
                #3
                #4
                #2
                #3
                #4
                #3
                #4
                #4
                #[1]
                #[1, 2]
                #[1, 3]
                #[1, 4]
                #[2]
                #[2, 3]
                #[2, 4]
                #[3]
                #[3, 4]
                #[4]
                dfs(i+1, k-1, list)
                list.pop()
        dfs(1,k) #이걸먼저 실행(1,2)-->(4,2)
        #return result

s =Solution()
print(s.combine(4,2))


#결과물 = []
#1부터 4까지 반복 :for i in range(1, 4+1)
#[1]
#    [1]을 추가 = [1]
    # 2부터 4까지반복
    #     [2]
    #         [2]를 추가 - [1,2]
    #           3부터 4까지 반복
    #               [3]을추가안할거임 why?리스트의 길이가 k와 동일해서
    #               [4]을추가안할거임 why?리스트의 길이가 k와 동일해서
    #     [3]
    #         [3]를 추가 - [1,3]
    #           4부터 4까지 반복
    #               [4]을추가안할거임 why?리스트의 길이가 k와 동일해서
    #
    #     [4]
    #         [4]를 추가 - [1,4]
    #           반복X
#[2]
#    [2]을 추가
#    3부터 4까지반복
#       [3]
#           [3]를 추가 - [2,3]
#           4부터 4까지 반복
#               [4]을추가안할거임 why?리스트의 길이가 k와 동일해서
#       [4]
#           [4]를 추가 - [1,4]
#           반복X
#[3]
#   [3]를 추가
#   3부터 4까지 반복
#
#       [4]
#           [4]를 추가  -[3,4]
#              반복 x